package filemaker

import (
    "bytes"
    "fmt"
    "time"
)

// 定义换行符
const (
    // 换行符
    NEW_LINE = "\r\n"
    // 标识注释符，用以区分model部分的开始和结束
    MODEL_COMMENT_START = "//:------------------- MODEL START ----------------------://"
    MODEL_COMMENT_END = "//:------------------- MODEL END ----------------------://"
)


// 构造包以及import部分
func (fm *FileMaker) buildHeader() string {
    buf := bytes.Buffer{}
    buf.WriteString(fmt.Sprintf("// model for table %s%s", fm.TableName, NEW_LINE))
    buf.WriteString(fmt.Sprintf("// auto generated by go model creator at %s%s", time.Now().String(), NEW_LINE))
    buf.WriteString(fmt.Sprintf("package %s%s", fm.PackageName, NEW_LINE))
    buf.WriteString(fmt.Sprintf("%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("import(%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\t\"github.com/whencome/gomodel\"%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf(")%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("%s", NEW_LINE))
    return buf.String()
}

// 构造model部分
func (fm *FileMaker) buildModel() string {
    buf := bytes.Buffer{}
    // create a model manager
    modelType := GetPropName(fm.TableName)
    modelVarName := GetVarName(fm.TableName)
    buf.WriteString(fmt.Sprintf("// 定义一个model manager%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("var %sMgr = gomodel.NewModelManager(&%s{})%s", modelVarName, modelType, NEW_LINE))
    buf.WriteString(NEW_LINE)
    // 分页查询结果
    buf.WriteString(fmt.Sprintf("// 定义分页查询结果%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("type %sQueryResult struct {%s", modelType, NEW_LINE))
    buf.WriteString(fmt.Sprintf("\tTotalCount int%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\tRowsCount int%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\tPage int%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\tPageSize int%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\tRows []*%s%s", modelType, NEW_LINE))
    buf.WriteString(fmt.Sprintf("}%s", NEW_LINE))
    buf.WriteString(NEW_LINE)
    // model定义
    buf.WriteString(fmt.Sprintf("// model for table %s%s", fm.TableName, NEW_LINE))
    if fm.TableComment != "" {
        buf.WriteString(fmt.Sprintf("// %s%s", fm.TableComment, NEW_LINE))
    }
    buf.WriteString(fmt.Sprintf("type %s struct{%s", modelType, NEW_LINE))
    for _, field := range fm.Fields {
        buf.WriteString(fmt.Sprintf("\t%s \t %s `db:\"%s\" json:\"%s\"`", field.PropName, field.DataType, field.FieldName, field.FieldName))
        if field.Comment != "" {
            buf.WriteString(fmt.Sprintf(" \t// %s%s", field.Comment, NEW_LINE))
        }
    }
    buf.WriteString(fmt.Sprintf("}%s", NEW_LINE))
    buf.WriteString(NEW_LINE)
    // 实现Modeler接口
    buf.WriteString("// GetDatabase 获取数据库名称（返回配置中的名称，不要使用实际数据库名称，因为实际数据库名称在不同环境可能不一样）\r\n")
    buf.WriteString(fmt.Sprintf("func (t *%s) GetDatabase() string {%s", modelType, NEW_LINE))
    buf.WriteString(fmt.Sprintf("\treturn \"%s\"\r\n", fm.ConnectionName))
    buf.WriteString(fmt.Sprintf("}%s", NEW_LINE))
    buf.WriteString(NEW_LINE)

    buf.WriteString("// GetTableName 获取数据库数据存放的数据表名称\r\n")
    buf.WriteString(fmt.Sprintf("func (t *%s) GetTableName() string {%s", modelType, NEW_LINE))
    buf.WriteString(fmt.Sprintf("\treturn \"%s\"\r\n", fm.TableName))
    buf.WriteString(fmt.Sprintf("}%s", NEW_LINE))
    buf.WriteString(NEW_LINE)

    buf.WriteString("// AutoIncrementField 自增字段名称，如果没有则返回空\r\n")
    buf.WriteString(fmt.Sprintf("func (t *%s) AutoIncrementField() string {%s", modelType, NEW_LINE))
    buf.WriteString(fmt.Sprintf("\treturn \"%s\"%s", fm.PrimaryKeyField, NEW_LINE))
    buf.WriteString(fmt.Sprintf("}%s", NEW_LINE))
    buf.WriteString(NEW_LINE)

    buf.WriteString("// GetDBFieldTag 获取数据库字段映射tag\r\n")
    buf.WriteString(fmt.Sprintf("func (t *%s) GetDBFieldTag() string {%s", modelType, NEW_LINE))
    buf.WriteString(fmt.Sprintf("\treturn \"db\"%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("}%s", NEW_LINE))
    buf.WriteString(NEW_LINE)

    // create model
    buf.WriteString(fmt.Sprintf("// %sModel model for %s%s", modelType, modelType, NEW_LINE))
    buf.WriteString(fmt.Sprintf("type %sModel struct {%s", modelType, NEW_LINE))
    buf.WriteString(fmt.Sprintf("\t*gomodel.ModelManager%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("}%s", NEW_LINE))
    buf.WriteString(NEW_LINE)

    // 提供常用的查询接口
    buf.WriteString(fmt.Sprintf("// GetPage 查询分页信息%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("func (m *%sModel) GetPage(conds interface{}, orderBy string, page, pageSize int) (*%sQueryResult, error) {%s", modelType, modelType, NEW_LINE))
    buf.WriteString(fmt.Sprintf("\t// 查询分页信息%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\tquerier := m.NewQuerier()%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\tpageRs, err := querier.Where(conds).OrderBy(orderBy).QueryPage( page, pageSize)%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\tif err != nil {%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\t\treturn nil, err%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\t}%s", NEW_LINE))
    buf.WriteString(NEW_LINE)
    buf.WriteString(fmt.Sprintf("\t// 构造查询结果%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\tqueryRs := &%sQueryResult{%s", modelType, NEW_LINE))
    buf.WriteString(fmt.Sprintf("\t\tTotalCount:pageRs.TotalCount,%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\t\tRowsCount:pageRs.RowsCount,%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\t\tPage:page,%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\t\tPageSize:pageSize, %s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\t\tRows:make([]*%s, 0),%s", modelType, NEW_LINE))
    buf.WriteString(fmt.Sprintf("\t}%s", NEW_LINE))
    buf.WriteString(NEW_LINE)
    buf.WriteString(fmt.Sprintf("\t// 将查询结果转换为对象%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\tfor _, row := range pageRs.Rows {%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\t\tv := (m.MapToModeler(row)).(*%s)%s", modelType, NEW_LINE))
    buf.WriteString(fmt.Sprintf("\t\tqueryRs.Rows = append(queryRs.Rows, v)%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\t}%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\treturn queryRs, nil%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("}%s", NEW_LINE))
    buf.WriteString(NEW_LINE)

    buf.WriteString(fmt.Sprintf("// GetOne 根据条件查询满足条件的数据%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("func (m *%sModel) GetOne(conds interface{}, orderBy string) (*%s, error) {%s", modelType, modelType, NEW_LINE))
    buf.WriteString(fmt.Sprintf("\tobj, err := m.FindOne(conds, orderBy)%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\tif err != nil {%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\t\treturn nil, err%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\t}%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\tif obj == nil {%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\t\treturn nil, nil%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\t}%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\tmObj := obj.(*%s)%s", modelType, NEW_LINE))
    buf.WriteString(fmt.Sprintf("\treturn mObj, nil%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("}%s", NEW_LINE))

    buf.WriteString(fmt.Sprintf("// GetAll 查询满足条件的全部信息%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("func (m *%sModel) GetAll(conds interface{}, orderBy string) ([]*%s, error) {%s", modelType, modelType, NEW_LINE))
    buf.WriteString(fmt.Sprintf("\t// 查询分页信息%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\trows, err := m.FindAll(conds, orderBy)%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\tif err != nil {%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\t\treturn nil, err%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\t}%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\tif rows == nil {%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\t\treturn nil, nil%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\t}%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\t// 构造查询结果%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\tresult := make([]*%s, 0)%s", modelType, NEW_LINE))
    buf.WriteString(fmt.Sprintf("\t// 将查询结果转换为对象%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\tfor _, row := range rows {%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\t\tv := row.(*%s)%s", modelType, NEW_LINE))
    buf.WriteString(fmt.Sprintf("\t\tresult = append(result, v)%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\t}%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("\treturn result, nil%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("}%s", NEW_LINE))
    buf.WriteString(NEW_LINE)
    return buf.String()
}

// 构造初始化model manager的方法
func (fm *FileMaker) buildInitModelContent() string {
    modelType := GetPropName(fm.TableName)
    modelVarName := GetVarName(fm.TableName)
    buf := bytes.Buffer{}
    buf.WriteString(fmt.Sprintf("// New%sModel create a %s Model%s", modelType, modelType, NEW_LINE))
    buf.WriteString(fmt.Sprintf("func New%sModel() *%sModel {%s", modelType, modelType, NEW_LINE))
    buf.WriteString(fmt.Sprintf("\treturn &%sModel{%s", modelType, NEW_LINE))
    buf.WriteString(fmt.Sprintf("\t\t%sMgr,%s", modelVarName, NEW_LINE))
    buf.WriteString(fmt.Sprintf("\t}%s", NEW_LINE))
    buf.WriteString(fmt.Sprintf("}%s", NEW_LINE))
    buf.WriteString(NEW_LINE)
    return buf.String()
}